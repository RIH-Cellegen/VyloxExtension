Vylox Extension's Gear


- What is Gear in the Extension? What is it mean for me?

Gear is the second Category of the system which Vylox Extension is built for. The Extension has 3 types:
	- Core (Scripts and Tools, which can be accessed by any script and has global values which you
			can acces with special functions.)
	+ Gear (Classes, which interact with Core's Scripts or with each other Classes inside Gear.)
	- Iron (Resources, Assets and other stuff, which relate to Gear or Core.)
All have their own uses in the system, which will make sure, that you'll have no problem creating new systems based
off of this one, or using the current system's resources as part of your game development.

- What can I use in Gear?

on Gear, we have custom classes which are extended to VScript. Some Custom Classes have their names set, so other functions
can access it without conflict.
	- VCharacter2D (A Character Node with a custom Physics system and custom properties, which uses VScript's and
					VInspector's functions.)
	
	- VInspector (A Custom Class, which any script can use to make custom properties for a Node's Inspector.)
	
	- VWeapon2D (A Character Node addition, that must be used as a child of a VCharacter2D Node. It has custom weapon
				 categories and configuration, relative to the parent Node's configuration values.)
	
	- VInventory2D (A Character Node addition, that must be used as a child of a VCharacter2D Node. It's a Custom Node
					with a sorting system and display options. The Node has childs, where Images and Item Descriptions
					can be configured and only the parent Node's variables can be accessed for Inventory management.)
	
	+ Common within all listed Custom Classes:
		- All of the Custom Classes can be created in a script with "custom_class.new()". Replace "custom_class" with
		  your Custom Class of your choosing.
		- All of the Custom Classes must have a custom name by changing their original name (which should be the attached
		  Node's type) to the Custom Node's name, so there is no conflict with Core's functions and scripts.
		  example:
		#-------------------------------------------#
			func _ready():
				self.name = "custom_object_name"
		#-------------------------------------------#  
		Replace "custom_object_name" with the proper Custom Class name which exists inside VScript -> VType's Arrays.
